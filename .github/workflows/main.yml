name: Pipeline

on:
  pull_request:
    branches:
      - develop
    types: [opened, synchronize]
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10.4'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Migrations
      run: |
        DB_NAME=${{ secrets.DB_NAME }} DB_USER=${{ secrets.DB_USER }} DB_PASSWORD=${{ secrets.DB_PASSWORD }} DB_HOST=${{ secrets.DB_HOST }} DB_PORT=${{ secrets.DB_PORT }} python manage.py migrate

    - name: Run unit tests and notify Slack on failure
      run: |
        DB_NAME=${{ secrets.DB_NAME }} \
        DB_USER=${{ secrets.DB_USER }} \
        DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
        DB_HOST=${{ secrets.DB_HOST }} \
        DB_PORT=${{ secrets.DB_PORT }} \
        python manage.py test || \
        (curl -X POST -H 'Content-type: application/json' --data '{"text":"PIPELINE FAILURE: Unit tests failed"}' $SLACK && exit 1)
      env:
          SLACK: ${{ secrets.SLACK }}

    
    - name: Build Docker image
      run: |
        docker build -t dodo .

    - name: Push Docker image to Docker Hub
      if: success()
      run: |
        docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_PASSWORD }}
        docker tag dodo ${{ secrets.DOCKERHUB_USERNAME }}/dodo
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/dodo

    - name: Send message to Slack
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"PIPELINE SUCCESS"}' $SLACK
      env:
          SLACK: ${{ secrets.SLACK }}


